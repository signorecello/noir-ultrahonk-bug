"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reconstructProofWithPublicInputsHonk = exports.UltraHonkVerifier = exports.reconstructProofWithPublicInputs = exports.BarretenbergVerifier = void 0;
const public_inputs_js_1 = require("./public_inputs.js");
class BarretenbergVerifier {
    options;
    // These type assertions are used so that we don't
    // have to initialize `api` and `acirComposer` in the constructor.
    // These are initialized asynchronously in the `init` function,
    // constructors cannot be asynchronous which is why we do this.
    api;
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
    acirComposer;
    constructor(options = { threads: 1 }) {
        this.options = options;
    }
    /** @ignore */
    async instantiate() {
        if (!this.api) {
            if (typeof navigator !== 'undefined' && navigator.hardwareConcurrency) {
                this.options.threads = navigator.hardwareConcurrency;
            }
            else {
                try {
                    const os = await Promise.resolve().then(() => __importStar(require('os')));
                    this.options.threads = os.cpus().length;
                }
                catch (e) {
                    console.log('Could not detect environment. Falling back to one thread.', e);
                }
            }
            const { Barretenberg, RawBuffer, Crs } = await Promise.resolve().then(() => __importStar(require('@aztec/bb.js')));
            // This is the number of CRS points necessary to verify a Barretenberg proof.
            const NUM_CRS_POINTS_FOR_VERIFICATION = 0;
            const [api, crs] = await Promise.all([Barretenberg.new(this.options), Crs.new(NUM_CRS_POINTS_FOR_VERIFICATION)]);
            await api.commonInitSlabAllocator(NUM_CRS_POINTS_FOR_VERIFICATION);
            await api.srsInitSrs(new RawBuffer([] /* crs.getG1Data() */), NUM_CRS_POINTS_FOR_VERIFICATION, new RawBuffer(crs.getG2Data()));
            this.acirComposer = await api.acirNewAcirComposer(NUM_CRS_POINTS_FOR_VERIFICATION);
            this.api = api;
        }
    }
    /** @description Verifies a proof */
    async verifyProof(proofData, verificationKey) {
        const { RawBuffer } = await Promise.resolve().then(() => __importStar(require('@aztec/bb.js')));
        await this.instantiate();
        // The verifier can be used for a variety of ACIR programs so we should not assume that it
        // is preloaded with the correct verification key.
        await this.api.acirLoadVerificationKey(this.acirComposer, new RawBuffer(verificationKey));
        const proof = reconstructProofWithPublicInputs(proofData);
        return await this.api.acirVerifyProof(this.acirComposer, proof);
    }
    async destroy() {
        if (!this.api) {
            return;
        }
        await this.api.destroy();
    }
}
exports.BarretenbergVerifier = BarretenbergVerifier;
function reconstructProofWithPublicInputs(proofData) {
    // Flatten publicInputs
    const publicInputsConcatenated = (0, public_inputs_js_1.flattenFieldsAsArray)(proofData.publicInputs);
    // Concatenate publicInputs and proof
    const proofWithPublicInputs = Uint8Array.from([...publicInputsConcatenated, ...proofData.proof]);
    return proofWithPublicInputs;
}
exports.reconstructProofWithPublicInputs = reconstructProofWithPublicInputs;
class UltraHonkVerifier {
    options;
    // These type assertions are used so that we don't
    // have to initialize `api` in the constructor.
    // These are initialized asynchronously in the `init` function,
    // constructors cannot be asynchronous which is why we do this.
    api;
    constructor(options = { threads: 1 }) {
        this.options = options;
    }
    /** @ignore */
    async instantiate() {
        if (!this.api) {
            if (typeof navigator !== 'undefined' && navigator.hardwareConcurrency) {
                this.options.threads = navigator.hardwareConcurrency;
            }
            else {
                try {
                    const os = await Promise.resolve().then(() => __importStar(require('os')));
                    this.options.threads = os.cpus().length;
                }
                catch (e) {
                    console.log('Could not detect environment. Falling back to one thread.', e);
                }
            }
            const { Barretenberg, RawBuffer, Crs } = await Promise.resolve().then(() => __importStar(require('@aztec/bb.js')));
            // This is the number of CRS points necessary to verify a Barretenberg proof.
            const NUM_CRS_POINTS_FOR_VERIFICATION = 0;
            const [api, crs] = await Promise.all([Barretenberg.new(this.options), Crs.new(NUM_CRS_POINTS_FOR_VERIFICATION)]);
            await api.commonInitSlabAllocator(NUM_CRS_POINTS_FOR_VERIFICATION);
            await api.srsInitSrs(new RawBuffer([] /* crs.getG1Data() */), NUM_CRS_POINTS_FOR_VERIFICATION, new RawBuffer(crs.getG2Data()));
            this.api = api;
        }
    }
    /** @description Verifies a proof */
    async verifyProof(proofData, verificationKey) {
        const { RawBuffer } = await Promise.resolve().then(() => __importStar(require('@aztec/bb.js')));
        await this.instantiate();
        const proof = reconstructProofWithPublicInputsHonk(proofData);
        return await this.api.acirVerifyUltraHonk(proof, new RawBuffer(verificationKey));
    }
    async destroy() {
        if (!this.api) {
            return;
        }
        await this.api.destroy();
    }
}
exports.UltraHonkVerifier = UltraHonkVerifier;
const serializedBufferSize = 4;
const fieldByteSize = 32;
const publicInputOffset = 3;
const publicInputsOffsetBytes = publicInputOffset * fieldByteSize;
function reconstructProofWithPublicInputsHonk(proofData) {
    // Flatten publicInputs
    const publicInputsConcatenated = (0, public_inputs_js_1.flattenFieldsAsArray)(proofData.publicInputs);
    const proofStart = proofData.proof.slice(0, publicInputsOffsetBytes + serializedBufferSize);
    const proofEnd = proofData.proof.slice(publicInputsOffsetBytes + serializedBufferSize);
    // Concatenate publicInputs and proof
    const proofWithPublicInputs = Uint8Array.from([...proofStart, ...publicInputsConcatenated, ...proofEnd]);
    return proofWithPublicInputs;
}
exports.reconstructProofWithPublicInputsHonk = reconstructProofWithPublicInputsHonk;
